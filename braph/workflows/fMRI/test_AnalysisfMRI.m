% test AnalysisfMRI
br1 = BrainRegion('BR1', 'brain region 1', 1, 11, 111);
br2 = BrainRegion('BR2', 'brain region 2', 2, 22, 222);
br3 = BrainRegion('BR3', 'brain region 3', 3, 33, 333);
br4 = BrainRegion('BR4', 'brain region 4', 4, 44, 444);
br5 = BrainRegion('BR5', 'brain region 5', 5, 55, 555);
atlas = BrainAtlas('brain atlas', {br1, br2, br3, br4, br5});

sub11 = SubjectfMRI(atlas, 'SubjectID', '11', 'age', 20, 'fMRI', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub12 = SubjectfMRI(atlas, 'SubjectID', '12', 'age', 20, 'fMRI', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub13 = SubjectfMRI(atlas, 'SubjectID', '13', 'age', 20, 'fMRI', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub14 = SubjectfMRI(atlas, 'SubjectID', '14', 'age', 20, 'fMRI', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub15 = SubjectfMRI(atlas, 'SubjectID', '15', 'age', 20, 'fMRI', .5 + .5 * rand(atlas.getBrainRegions().length()));
group1 = Group('SubjectfMRI', {sub11, sub12, sub13, sub14, sub15}, 'GroupName', 'GroupTestfMRI1');

sub21 = SubjectfMRI(atlas, 'SubjectID', '21', 'age', 20, 'fMRI', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub22 = SubjectfMRI(atlas, 'SubjectID', '22', 'age', 20, 'fMRI', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub23 = SubjectfMRI(atlas, 'SubjectID', '23', 'age', 20, 'fMRI', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub24 = SubjectfMRI(atlas, 'SubjectID', '24', 'age', 20, 'fMRI', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub25 = SubjectfMRI(atlas, 'SubjectID', '25', 'age', 20, 'fMRI', .5 + .5 * rand(atlas.getBrainRegions().length()));
group2 = Group('SubjectfMRI', {sub21, sub22, sub23, sub24, sub25}, 'GroupName', 'GroupTestfMRI2');

cohort = Cohort('Cohort fMRI', 'SubjectfMRI', atlas, {sub11, sub12, sub13, sub14, sub15, sub21, sub22, sub23, sub24, sub25});
cohort.getGroups().add(group1.getName(), group1)
cohort.getGroups().add(group2.getName(), group2)

measures = {'Assortativity', 'Degree', 'Distance'};

%% Test 1: Instantiation
analysis = AnalysisfMRI(cohort, {}, {}, {}); %#ok<*NASGU>

%% Test 2: Create correct ID
analysis = AnalysisfMRI(cohort, {}, {}, {});

measurement_id = analysis.getMeasurementID('Degree', group1);
expected_value = [ ...
                tostring(analysis.getMeasurementClass()) ' ' ...
                tostring('Degree') ' ' ...
                tostring(analysis.getCohort().getGroups().getIndex(group1)) ...
                ];
assert(ischar(measurement_id), ...
    ['BRAPH:AnalysisfMRI:getMeasurementID'], ...
    ['AnalysisfMRI.getMeasurementID() not creating an ID']) %#ok<*NBRAK>
assert(isequal(measurement_id, expected_value), ...
    ['BRAPH:AnalysisfMRI:getMeasurementID'], ...
    ['AnalysisfMRI.getMeasurementID() not creating correct ID']) %#ok<*NBRAK>

comparison_id = analysis.getComparisonID('Distance', {group1, group2});
expected_value = [ ...
                tostring(analysis.getComparisonClass()) ' ' ...
                tostring('Distance') ' ' ...
                tostring(analysis.getCohort().getGroups().getIndex(group1)) ' ' ...
                tostring(analysis.getCohort().getGroups().getIndex(group2)) ...
                ];
assert(ischar(comparison_id), ...
    ['BRAPH:AnalysisfMRI:getComparisonID'], ...
    ['AnalysisfMRI.getComparisonID() not creating an ID']) %#ok<*NBRAK>
assert(isequal(comparison_id, expected_value), ...
    ['BRAPH:AnalysisfMRI:getComparisonID'], ...
    ['AnalysisfMRI.getComparisonID() not creating correct ID']) %#ok<*NBRAK>

randomcomparison_id = analysis.getRandomComparisonID('PathLength', group1);
expected_value = [ ...
                tostring(analysis.getRandomComparisonClass()) ' ' ...
                tostring('PathLength') ' ' ...
                tostring(analysis.getCohort().getGroups().getIndex(group1)) ...
                ];
assert(ischar(randomcomparison_id), ...
    ['BRAPH:AnalysisfMRI:getRandomComparisonID'], ...
    ['AnalysisfMRI.getRandomComparisonID() not creating an ID']) %#ok<*NBRAK>
assert(isequal(randomcomparison_id, expected_value), ...
    ['BRAPH:AnalysisfMRI:getRandomComparisonID'], ...
    ['AnalysisfMRI.getRandomComparisonID() not creating correct ID']) %#ok<*NBRAK>

%% Test 3: Calculate Measurement
for i = 1:1:length(measures)
    measure = measures{i};
    analysis = AnalysisfMRI(cohort, {}, {}, {});
    calculated_measurement = analysis.calculateMeasurement(measure, group1);
    
    assert(~isempty(calculated_measurement), ...
        ['BRAPH:AnalysisfMRI:calculateMeasurement'], ...
        ['AnalysisfMRI.calculateMeasurement() not working']) %#ok<*NBRAK>
    
    calculated_measurement = analysis.getMeasurements().getValue(1);
    calculated_value = calculated_measurement.getMeasureValues();
    calculted_average = calculated_measurement.getGroupAverageValue();
    
    if Measure.is_global(measure)
        
        assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
            ['BRAPH:AnalysisfMRI:calculateMeasurement'], ...
            ['AnalysisfMRI.calculateMeasurement() not working for global']) %#ok<*NBRAK>
        assert(iscell(calculated_value) & ...
            isequal(numel(calculated_value), group1.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), calculated_value)), ...
            ['BRAPH:AnalysisfMRI:Instantiation'], ...
            ['AnalysisfMRI does not initialize correctly with global measures.']) %#ok<*NBRAK>
        assert(isequal(size(calculted_average), [1 1]), ...
            ['BRAPH:AnalysisfMRI:Instantiation'], ...
            ['AnalysisfMRI does not initialize correctly with global measures.']) %#ok<*NBRAK>
        
    elseif Measure.is_nodal(measure)
        
        assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
            ['BRAPH:AnalysisfMRI:calculateMeasurement'], ...
            ['AnalysisfMRI.calculateMeasurement() not working for nodal']) %#ok<*NBRAK>
        assert(iscell(calculated_value) & ...
            isequal(numel(calculated_value), group1.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), calculated_value)), ...
            ['BRAPH:AnalysisfMRI:Instantiation'], ...
            ['AnalysisfMRI does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
        assert(isequal(size(calculted_average), [atlas.getBrainRegions().length(), 1]), ...
            ['BRAPH:AnalysisfMRI:Instantiation'], ...
            ['AnalysisfMRI does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
    else
        
        assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
            ['BRAPH:AnalysisfMRI:calculateMeasurement'], ...
            ['AnalysisfMRI.calculateMeasurement() not working for binodal']) %#ok<*NBRAK>
        assert(iscell(calculated_value) & ...
            isequal(numel(calculated_value), group1.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), calculated_value)), ...
            ['BRAPH:MeasurementDTI:Instantiation'], ...
            ['MeasurementDTI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
        assert(isequal(size(calculted_average), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), ...
            ['BRAPH:MeasurementDTI:Instantiation'], ...
            ['MeasurementDTI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
    end
end

% %% Test 5: Compare
% analysis = AnalysisfMRI(cohort, {}, {}, {});
% comparition = analysis.calculateComparison('Strength', {group1, group2}, 'NumerOfPermutations', 10); 
% 
% assert(~isempty(comparition), ...
%     ['BRAPH:AnalysisfMRI:calculateComparison'], ...
%     ['AnalysisfMRI.calculateComparison() not working']) %#ok<*NBRAK>
