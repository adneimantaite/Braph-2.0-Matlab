% test MeasurementDTI

br1 = BrainRegion('BR1', 'brain region 1', 1, 11, 111);
br2 = BrainRegion('BR2', 'brain region 2', 2, 22, 222);
br3 = BrainRegion('BR3', 'brain region 3', 3, 33, 333);
br4 = BrainRegion('BR4', 'brain region 4', 4, 44, 444);
br5 = BrainRegion('BR5', 'brain region 5', 5, 55, 555);
atlas = BrainAtlas('brain atlas', {br1, br2, br3, br4, br5});

subject_class = Measurement.getSubjectClass('MeasurementDTI'); % SubjectDTI

sub1 = Subject.getSubject(subject_class, repmat({atlas}, 1, Subject.getBrainAtlasNumber(subject_class)), 'SubjectID', 1);
sub2 = Subject.getSubject(subject_class, repmat({atlas}, 1, Subject.getBrainAtlasNumber(subject_class)), 'SubjectID', 2);
sub3 = Subject.getSubject(subject_class, repmat({atlas}, 1, Subject.getBrainAtlasNumber(subject_class)), 'SubjectID', 3);
group = Group(subject_class, {sub1, sub2, sub3});

measures = {'Assortativity', 'Degree', 'Distance'};
% type_of_measure = {'global', 'nodal', 'binodal'};
 
%% Test 1: Instantiation
for i = 1:1:numel(measures)
    measurement = MeasurementDTI('m1', atlas, group, 'MeasurementDTI.measure_code', measures{i});

    assert(~isempty(measurement), ...
        ['BRAPH:MeasurementDTI:Instantiation'], ...
        ['MeasurementDTI does not initialize correctly.']) %#ok<*NBRAK>
end

%% Test 2: Correct size defaults
for i = 1:1:numel(measures)
    measurement = MeasurementDTI('m1', atlas, group, 'MeasurementDTI.measure_code', measures{i});
        
    values = measurement.getMeasureValues();
    average_value = measurement.getGroupAverageValue();
    
    if Measure.is_global(measures{i})
        assert(iscell(values) & ...
            isequal(numel(values), group.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), values)), ...
            ['BRAPH:MeasurementDTI:Instantiation'], ...
            ['MeasurementDTI does not initialize correctly with global measures.']) %#ok<*NBRAK>
        assert(isequal(numel(average_value), 1), ...
            ['BRAPH:MeasurementDTI:Instantiation'], ...
            ['MeasurementDTI does not initialize correctly with global measures.']) %#ok<*NBRAK>
    elseif Measure.is_nodal(measures{i})
        assert(iscell(values) & ...
            isequal(numel(values), group.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), values)), ...
            ['BRAPH:MeasurementDTI:Instantiation'], ...
            ['MeasurementDTI does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
        assert(isequal(size(average_value), [atlas.getBrainRegions().length(), 1]), ...
            ['BRAPH:MeasurementDTI:Instantiation'], ...
            ['MeasurementDTI does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
    elseif Measure.is_binodal(measures{i})
        assert(iscell(values) & ...
            isequal(numel(values), group.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), values)), ...
            ['BRAPH:MeasurementDTI:Instantiation'], ...
            ['MeasurementDTI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
        assert(isequal(size(average_value), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), ...
            ['BRAPH:MeasurementDTI:Instantiation'], ...
            ['MeasurementDTI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
    end
end

%% Test 3: Initialize with value
for i = 1:1:numel(measures)
    % setup
    for j = 1:1:group.subjectnumber()
        A = rand(atlas.getBrainRegions().length());
        g = Graph.getGraph('GraphWU', A);
        m  = Measure.getMeasure(measures{i}, g);
        values{j} =  m.getValue();
    end
    average_value = mean(reshape(cell2mat(values), [size(values{1}, 1), size(values{1}, 2), group.subjectnumber()]), 3);
   
    % act
    measurement = MeasurementDTI('m1', atlas, group, 'MeasurementDTI.measure_code', measures{i}, ...
        'MeasurementDTI.values', values, ...
        'MeasurementDTI.average_value', average_value ...
        );
    
    % assert
%     values = measurement.getMeasureValues();
%     average_value = measurement.getGroupAverageValue();
%     if Measure.is_global(measures{i})
%         assert(isequal([1 1], size(values)), ...
%             ['BRAPH:MeasurementDTI'], ...
%             ['MeasurementDTI does not initialize data correctly with ' type_of_measure{i} ' measures.']) %#ok<*NBRAK>
%         assert(isequal([1 1], size(average_value))  && isequal(1, numel({average_value})), ...
%             ['BRAPH:MeasurementDTI'], ...
%             ['MeasurementDTI does not initialize correctly with ' type_of_measure{i} ' measures.']) %#ok<*NBRAK>
%     elseif Measure.is_nodal(measures{i})
%         assert(isequal([5 1], size(values)), ...
%             ['BRAPH:MeasurementDTI'], ...
%             ['MeasurementDTI does not initialize data correctly with ' type_of_measure{i} ' measures.']) %#ok<*NBRAK>
%         assert(isequal([5 1], size(average_value)) && isequal(1, numel({average_value})), ...
%             ['BRAPH:MeasurementDTI'], ...
%             ['MeasurementDTI does not initialize correctly with ' type_of_measure{i} ' measures.']) %#ok<*NBRAK>
%     else
%         assert(isequal([5 5], size(values)), ...
%             ['BRAPH:MeasurementDTI'], ...
%             ['MeasurementDTI does not initialize data correctly with ' type_of_measure{i} ' measures.']) %#ok<*NBRAK>
%          assert(isequal([5 5], size(average_value)) && isequal(1, numel({average_value})), ...
%             ['BRAPH:MeasurementDTI'], ...
%             ['MeasurementDTI does not initialize correctly with ' type_of_measure{i} ' measures.']) %#ok<*NBRAK>
%     end
end